<!DOCTYPE html>
<html>
    <head>
        <base target="_top">
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">  
        <title>IEDON-NET NODE MAP</title>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
        <style>
            html, body {
                height: 100%;
                margin: 0;
            }
            .leaflet-container {
                height: 100%;
                width: 100%;
                max-width: 100%;
                max-height: 100%;
            }
        </style>      
    </head>
    <body>
        <div id="map" style="width: 100%; height: 100%"></div>
        <script>
            const nodes = {
                'CN-CZX': {
                    name: 'ðŸ‡¨ðŸ‡³ <b>Changzhou, Jiangsu, China</b><br/><small>172.23.91.121, fd42:4242:2189:c3::1</small>',
                    nodeId: 121,
                    coordinates: [ 119.973999, 31.811001 ]
                },
                'JP-TYO': {
                    name: 'ðŸ‡¯ðŸ‡µ <b>(Great Tokyo Area) Inzai, Chiba, Japan</b><br/><small>172.23.91.116, fd42:4242:2189:ee::1</small>',
                    nodeId: 116,
                    coordinates: [ 140.14581540, 35.83234850 ]
                },
                'JP-KOT': {
                    name: 'ðŸ‡¯ðŸ‡µ <b>Koto, Tokyo, Japan</b><br/><small>172.23.91.115, fd42:4242:2189:115::1</small>',
                    nodeId: 115,
                    coordinates: [ 139.817413, 35.672855 ]
                },
                'US-LAX': {
                    name: 'ðŸ‡ºðŸ‡¸ <b>Los Angeles, CA, US</b><br/><small>172.23.91.114, fd42:4242:2189:ef::1</small>',
                    nodeId: 114,
                    coordinates: [ -118.243683, 34.052235 ]
                },
                'US-SJC': {
                    name: 'ðŸ‡ºðŸ‡¸ <b>San Jose, CA, US</b><br/><small>172.23.91.117, fd42:4242:2189:e8::1</small>',
                    nodeId: 117,
                    coordinates: [ -121.886329, 37.338208 ]
                },
                'DE-FRA': {
                    name: 'ðŸ‡©ðŸ‡ª <b>Frankfurt, Germany</b><br/><small>172.23.91.125, fd42:4242:2189:e9::1</small>',
                    nodeId: 125,
                    coordinates: [ 8.682127, 50.110922 ]
                },
                'CN-NTG': {
                    name: 'ðŸ‡¨ðŸ‡³ <b>Nantong, Jiangsu, China</b><br/><small>172.23.91.44, fd42:4242:2189:a0::44</small>',
                    nodeId: 44,
                    coordinates: [ 120.865, 31.9661 ]
                },
                'CN-SHA': {
                    name: 'ðŸ‡¨ðŸ‡³ <b>Shanghai, China</b><br/><small>172.23.91.113, fd42:4242:2189:113::1</small>',
                    nodeId: 113,
                    coordinates: [ 121.469170, 31.224361 ]
                },
                'HK-HKG': {
                    name: 'ðŸ‡­ðŸ‡° <b>Hong Kong, Hong Kong S.A.R.</b><br/><small>172.23.91.120, fd42:4242:2189:120::1</small>',
                    nodeId: 120,
                    coordinates: [ 114.177216, 22.302711 ]
                },
                'SG-SIN': {
                    name: 'ðŸ‡¸ðŸ‡¬ <b>Singapore</b><br/><small>172.23.91.119, fd42:4242:2189:119::1</small>',
                    nodeId: 119,
                    coordinates: [ 103.989441, 1.359167 ]
                },
            };
            const node_conns = {
                'CN-NTG': [ 'US-LAX', 'US-SJC', 'DE-FRA', 'JP-TYO', 'JP-KOT', 'HK-HKG', 'SG-SIN', 'CN-CZX', 'CN-SHA' ],
                'CN-CZX': [ 'US-LAX', 'US-SJC', 'DE-FRA', 'JP-TYO', 'JP-KOT', 'HK-HKG', 'SG-SIN', 'CN-SHA' ],
                'JP-TYO': [ 'US-LAX', 'US-SJC', 'DE-FRA', 'JP-KOT', 'HK-HKG', 'SG-SIN' ],
                'US-LAX': [ 'US-SJC', 'DE-FRA', 'HK-HKG', 'SG-SIN' ],
                'US-SJC': [ 'DE-FRA', 'HK-HKG', 'SG-SIN' ],
                'DE-FRA': [ 'HK-HKG', 'SG-SIN' ],
                'JP-KOT': [ 'HK-HKG', 'SG-SIN' ],
                'CN-SHA': [ 'HK-HKG' ]
            };
            const data = [];
            Object.keys(nodes).forEach(key => {
                data.push({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: nodes[key].coordinates
                    },
                    properties: {
                        name: nodes[key].name,
                        id: nodes[key].nodeId
                    }
                });
            });
            Object.keys(node_conns).forEach(key => {
                node_conns[key].forEach(peer => {
                    data.push({
                        type: 'Feature',
                        geometry: {
                            type: 'LineString',
                            coordinates: [ nodes[key].coordinates, nodes[peer].coordinates ]
                        }
                    });
                })
            });

            const map = L.map('map', {
                worldCopyJump: true,
                scrollWheelZoom: false,
                doubleClickZoom: false
            }).setView([35, 20], 2);
            const customIcon = L.icon({
                iconUrl: './map/icon-pin.png',
                iconSize:     [24, 24],
                iconAnchor:   [13, 22],
                popupAnchor:  [0, -20]
            });
            const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
            L.geoJSON(data, {
                onEachFeature: function(features, layer) {
                    if (features.properties && features.properties.name) {
                        layer.bindPopup(features.properties.name);
                    }
                },
                pointToLayer: function(feature, latlng) {
                    return L.marker(latlng, { icon: customIcon });
                }
            }).addTo(map);
        </script>
    </body>
</html>